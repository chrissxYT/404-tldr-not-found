#!/usr/bin/env python3
# TODO: `translate` action
# TODO: put on pypi
from argparse import ArgumentParser
from functools import reduce
from os import path, chdir
from re import split
from subprocess import run, PIPE
from sys import argv
from urllib.parse import urlencode
from platform import system
from tldrlib import *

__version__ = '2.0-dev'

home = getenv('HOME')
editor = getenv('EDITOR', 'vi')
shell = getenv('SHELL', 'bash')
with open(f'{home}/.config/tldrgal/username') as f:
    username = f.readline().strip()

def sh(cmd, **kwargs):
    # TODO: --quiet
    # TODO: stderr
    print(cmd)
    return run(cmd, shell=True, check=True, **kwargs)

def run_open(arg):
    return run(['xdg-open' if 'linux' in system().lower() else 'open', arg], check=True)

def checkout(branch):
    """checks out `branch`, using -b if it doesn't exist, pulling otherwise"""
    if branch in sh('git branch', stdout=PIPE).stdout.decode('utf-8'):
        sh(f'git checkout {branch}')
        sh('git pull --ff-only')
    else:
        sh(f'git checkout -b {branch}')

def new_issue(params):
    params['labels'] = 'help wanted,new command'
    run_open('https://github.com/tldr-pages/tldr/issues/new?' + urlencode(params))

folder = home + '/.cache/tldr'
if not path.exists(folder):
    # TODO: document this message away
    input('Please make sure, you have created your fork, then press enter.')
    sh(f'git clone https://github.com/{username}/tldr.git {folder}')
    chdir(folder)
    sh('git remote add upstream https://github.com/tldr-pages/tldr.git')
elif not path.isdir(folder):
    print(f'{folder} exists but is not a directory, that is REALLY weird, please...delete it?')
    exit(1)
else:
    chdir(folder)
    sh('git checkout main')
    sh('git pull --ff-only')

if 'tldrl' not in get_all_installed_programs():
    sh('npm install -g tldr-lint')

action = argv[1]
del argv[1]
name = 'error'

if action not in ['missing', '--version', '-v', '-V', '--help', '-h', '-H', 'version', 'help', 'update', 'fetch-origin', 'fo']:
    name = argv[1]
    del argv[1]

if action in ['request', 'req', 'alias']:
    while argv[1][0] != '-':
        name += ' ' + argv[1]
        del argv[1]
    name = split(' |,|;|:', name)

parser = ArgumentParser()
parser.add_argument('-b', '--branch')
parser.add_argument('-l', '--language')
parser.add_argument('-m', '--commit-message', default=
        f'{name}: add page' if action in ['add', 'new', 'create'] else f'{name}: ')
parser.add_argument('-p', '--platform', default='common')
args = parser.parse_args()

if args.branch is None:
    args.branch = name.replace('+', 'x').split('=')[0]

page_path = 'pages' if args.language is None or args.language == 'en' else f'pages.{args.language}'
page_path += f'/{args.platform}/{name}.md'

if action in ['--version', '-v', '-V', 'version']:
    print(f'tldrgal {__version__} by pixel, chrissx Media')
elif action in ['--help', '-h', '-H', 'help']:
    argv0 = path.basename(argv[0])
    print(f'{argv0} [action] [...] [-blmp]')
    print()
    print(f'{argv0} add [name]')
    print(f'{argv0} alias [name]=[target] ...')
    print(f'{argv0} edit [name]')
    print(f'{argv0} missing')
    print(f'{argv0} rawedit [name]')
    print(f'{argv0} request [name] ...')
    print(f'{argv0} find [name]')
    print(f'{argv0} view [name]')
    print(f'{argv0} cat [name]')
    print(f'{argv0} rm [name]')
    print(f'{argv0} update')
    print()
    print('help, --help, -h, -H          Display this help')
    print('version, --version, -v, -V    Display information about this program')
    print()
    # TODO: HELP
elif action == 'missing':
    l = list(get_all_installed_programs() - get_all_tldr_pages('pages'))
    l.sort()
    for p in l:
        if not '.' in p:
            print(p)
elif action in ['add', 'new', 'create']:
    # TODO: translated templates
    checkout(args.branch)
    with open(page_path, 'w') as f:
        f.write(f'# {name}\n\n'
                '> DESC\n'
                '> More information: <insert>.\n\n'
                '- Example1:\n\n'
                '`' + name + ' {{arg1}} {{arg2}}`\n')
    sh(f'{editor} {page_path}')
    sh(f'tldrl -v {page_path}')
    sh(f'git add {page_path}')
    sh(f'git commit -m "{args.commit_message}"')
    sh(f'git push -u origin {args.branch}')
    sh('git checkout main')
elif action == 'alias':
    # TODO: translations with automatic check for which pages of the target exist
    #       (that needs a markdown parser, which is an...interesting problem)
    # TODO: we might want to check if len(name) % 2 == 0 => f'{name[0]}={name[1]}' ...
    # TODO: fix these damn names (i mean we have 3 vars that are called `name` here)
    # TODO: support `-m` somehow
    checkout(args.branch)
    for name in name:
        [name, target] = name.split('=')
        with open(page_path, 'w') as f:
            f.write(f'# {name}\n\n'
                    f'> This command is an alias of `{target}`.\n\n'
                    '- View documentation for the original command:\n\n'
                    f'`tldr {target}`\n')
        sh(f'git add {page_path}')
        sh(f'git commit -m "{name}: add page"')
    sh(f'git push -u origin {args.branch}')
    params = urlencode({'labels': 'new command', 'body': f'alias of `{target}`', 'expand': 1})
    run_open(f'https://github.com/tldr-pages/tldr/compare/main...{username}:{args.branch}?' + params)
    sh('git checkout main')
elif action == 'edit':
    checkout(args.branch)
    sh(f'{editor} {page_path}')
    sh(f'tldrl -v {page_path}')
    sh(f'git add {page_path}')
    sh(f'GIT_EDITOR={editor} git commit -e -m "{args.commit_message}"')
    sh(f'git push -u origin {args.branch}')
    sh('git checkout main')
elif action == 'rawedit':
    checkout(args.branch)
    sh(shell)
    sh('git add -A')
    sh(f'GIT_EDITOR={editor} git commit -e -m "{args.commit_message}"')
    sh(f'git push -u origin {args.branch}')
    sh('git checkout main')
elif action in ['request', 'req']:
    if len(name) == 1:
        new_issue({'title': f'page request: {name}'})
    else:
        title = 'page request: ' + reduce(lambda x, y: x + ', ' + y, name)
        body = reduce(lambda x, y: x + '\n' + y, map(lambda p: f'- [ ] [{p}]()', name))
        new_issue({'title': title, 'body': body})
elif action in ['find', 'fd']:
    sh(f'fd \'{name}\'')
elif action in ['view', 'open']:
    # TODO: SOMEHOW make this EDITOR agnostic
    # TODO: also rethink it and maybe make `tldrgal` like half a `tldr` client
    sh(f'view {page_path}')
elif action in ['cat']:
    sh(f'cat {page_path}')
elif action in ['delete', 'del', 'remove', 'rm']:
    # TODO: support varargs
    sh(f'git branch -D {name}')
    sh(f'git push -d origin {name}')
elif action in ['update', 'fetch-origin', 'fo']:
    sh('git fetch upstream')
    sh('git merge upstream/main')
    sh('git push')
else:
    print('Unknown action.')
    exit(1)

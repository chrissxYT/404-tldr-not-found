#!/usr/bin/env python3
# TODO: support for other edits (`rawedit`: opens `SHELL` in pages/common)
# TODO: alias for making aliases really quickly
# TODO: pull request
from argparse import ArgumentParser
from functools import reduce
from os import path, chdir
from re import split
from subprocess import run, PIPE
from tldrlib import *
from urllib.parse import urlencode

home = getenv('HOME')
editor = getenv('EDITOR', 'vi')

def sh(cmd, **kwargs):
    return run(cmd, shell=True, check=True, **kwargs)

def run_open(arg, **kwargs):
    """unfortunately this doesnt work on linux, we might want to use xdg-open there"""
    return run(['open', arg], check=True, **kwargs)

def checkout(branch):
    """checks out main, then checks out `branch`, using -b if it doesn't exist"""
    if branch in sh('git branch', stdout=PIPE).stdout.decode('utf-8'):
        sh(f'git checkout {branch} && git pull')
    else:
        sh(f'git checkout main && git pull && git checkout -b {branch}')

def page_path(name, platform, lang):
    dest = 'pages' if lang is None or lang == 'en' else f'pages.{lang}'
    return f'{dest}/{platform}/{name}.md'

def new_issue(params):
    params['labels'] = 'help wanted,new command'
    run_open('https://github.com/tldr-pages/tldr/issues/new?' + urlencode(params))

with open(f'{home}/.config/tldrgal/username') as f:
    username = f.readline().strip()

folder = home + '/.cache/tldrgal-temp-tldr'
if not path.exists(folder):
    input('Please make sure, you have created your fork, before saving. (Enter to acknowledge)')
    sh(f'git clone {TLDR_REPO} {folder}')
    sh(f'cd {folder} && git remote set-url origin https://github.com/{username}/tldr.git')
if not path.isdir(folder):
    print(f'{folder} exists but is not a directory, that is REALLY weird, please...delete it?')
    exit(1)
chdir(folder)

parser = ArgumentParser()
parser.add_argument('action', help='what you want to do, possible values: missing, add/new, edit, request')
parser.add_argument('-l', '--lang', help='the language of the tldr page(s) in question')
parser.add_argument('-p', '--platform', help='the platform of the tldr page(s) in question')
parser.add_argument('-n', '--name', help='the name of the tldr page(s) in question')
#parser.add_argument('-m', '--commit-message')
args = parser.parse_args()

if 'tldrl' not in get_all_installed_programs():
    sh('npm install -g tldr-lint')

if args.action == 'missing':
    l = list(get_all_installed_programs() - get_all_tldr_pages())
    l.sort()
    for p in l:
        if not '.' in p:
            print(p)
elif args.action == 'add' or args.action == 'new':
    if args.name is None:
        print('-n/--name is required for the add action')
        exit(1)
    if args.platform is None:
        args.platform = 'common'
    dest = page_path(args.name, args.platform, args.lang)
    checkout(args.name)
    with open(dest, 'w') as f:
        f.write(f'# {args.name}\n\n'
                '> DESC\n'
                '> More information: <insert>.\n\n'
                '- Example1:\n\n'
                '`' + args.name + ' {{arg1}} {{arg2}}`')
    sh(f'{editor} {dest}')
    sh(f'tldrl -v {dest}')
    sh(f'git add -A && git commit -m "{args.name}: add page"')
    sh(f'git push -u origin {args.name}')
elif args.action == 'edit':
    if args.name is None:
        print('-n/--name is required for the edit action')
        exit(1)
    if args.platform is None:
        args.platform = 'common'
    dest = page_path(args.name, args.platform, args.lang)
    checkout(args.name)
    sh(f'{editor} {dest}')
    sh(f'tldrl -v {dest}')
    sh(f'git add -A && GIT_EDITOR={editor} git commit -e -m "{args.name}: "')
    sh(f'git push -u origin {args.name}')
elif args.action == 'request':
    if args.name is None:
        print('-n/--name is required for the request action')
        exit(1)
    new_issue({'title': 'page request: ' + args.name})
elif args.action == 'multi-request':
    if args.name is None:
        print('-n/--name is required for the multi-request action')
        exit(1)
    pages = split(' |,|;|:', args.name)
    title = 'page request: ' + reduce(lambda x, y: x + ', ' + y, pages)
    body = reduce(lambda x, y: x + '\n' + y, map(lambda p: f'- [ ] [{p}]()', pages))
    new_issue({'title': title, 'body': body})
else:
    print('Unknown action.')
    exit(1)

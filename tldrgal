#!/usr/bin/env python3
# TODO: `translate` action
# TODO: put on pypi
# TODO: revert to branch from before (very annoying and complicated to get right)
# TODO: rawedit foreach with grep
# TODO: think about silencing a lot of commands given mainly by the user
# TODO: add-from-man
# TODO: no-url flag for multi req
# TODO: --base-directory
# TODO: only pull when necessary (maybe also --fast option)
# TODO: implement `cat` natively
# TODO: support spaces in page_path
from argparse import ArgumentParser
from functools import reduce
from os import chdir, path
from platform import system
from re import split
from subprocess import PIPE, run
from sys import argv, stderr
from urllib.parse import urlencode

from tldrlib import *

__version__ = '2.0-dev'

home = getenv('HOME')
editor = getenv('EDITOR', 'vi')
shell = getenv('SHELL', 'bash')
with open(f'{home}/.config/tldrgal/username') as f:
    username = f.readline().strip()

aliases = {
    '--version': 'version',
    '-v': 'version',
    'v': 'version',
    '--help': 'help',
    '-h': 'help',
    'h': 'help',
    'new': 'add',
    'create': 'add',
    'req': 'request',
    'open': 'view',
    'delete': 'rm',
    'del': 'rm',
    '-u': 'update',
    '--update': 'update',
    'fetch-origin': 'update',
    'fo': 'update',
    'co': 'checkout',
    'ch': 'checkout',
    'raw-edit': 'rawedit',
    'quick-edit': 'quickedit',
    # TODO: one-letter abbrs for all commands
}

action = aliases[ac] if (ac := argv.pop(1).lower()) in aliases else ac

def sh(cmd, quiet=False, **kwargs):
    if not quiet:
        print(cmd, file=stderr)
    return run(cmd, shell=True, check=True, **kwargs)

def run_open(arg):
    return run(['xdg-open' if 'linux' in system().lower() else 'open', arg], check=True)

def checkout(branch, force_normal=False):
    """checks out `branch`, using -b if it doesn't exist, pulling otherwise"""
    if branch == 'main' and not force_normal:
        sh('git checkout main', quiet=True, stdout=PIPE, stderr=PIPE)
    elif branch in sh('git branch', quiet=True, stdout=PIPE).stdout.decode('utf-8'):
        sh(f'git checkout {branch}')
        sh('git pull --ff-only')
    else:
        sh(f'git checkout -b {branch}')

def new_issue(params):
    params['labels'] = 'help wanted,new command'
    run_open('https://github.com/tldr-pages/tldr/issues/new?' + urlencode(params))

folder = home + '/.cache/tldr'
if not path.exists(folder):
    # TODO: document this message away
    input('Please make sure, you have created your fork, then press enter.')
    sh(f'git clone https://github.com/{username}/tldr.git {folder}')
    chdir(folder)
    sh('git remote add upstream https://github.com/tldr-pages/tldr.git')
elif not path.isdir(folder):
    print(f'{folder} exists but is not a directory, that is REALLY weird, please...delete it?')
    exit(1)

chdir(folder)
checkout('main')
if action not in ['help', 'version', 'request', 'rm']:
    sh('git pull --ff-only')

if 'tldrl' not in get_all_installed_programs():
    sh('npm install -g tldr-lint')

# TODO: improve
if action in ['missing', 'update', 'help', 'version']:
    name = 'ERROR'
else:
    name = argv.pop(1)
    if action in ['request', 'alias', 'rm', 'add']:
        while len(argv) >= 2 and argv[1][0] != '-':
            name += ' ' + argv.pop(1)
        name = split(' |,|;|:', name)

parser = ArgumentParser()
parser.add_argument('-b', '--branch')
parser.add_argument('-l', '--language')
parser.add_argument('-m', '--commit-message', default=
        'add page' if action == 'add' else f'{name}: ')
parser.add_argument('-p', '--platform', default='common')
parser.add_argument('-c', '--command', default=shell)
# TODO: `--template`/`-t` for `add`
# TODO: `--quiet`/`-q` for `sh`
args = parser.parse_args()

if args.branch is None:
    args.branch = name if isinstance(name, str) else reduce(lambda x, y: x + ',' + y, name)
    args.branch = args.branch.replace('+', 'x').split('=')[0].split('/')[-1]

def page_path(n=name):
    p = 'pages' if args.language is None or args.language == 'en' else f'pages.{args.language}'
    n = n.replace(' ', '-')
    return p + f'/{args.platform}/{n}.md'

if action == 'version':
    print(f'tldrgal {__version__} by pixel, chrissx Media')
elif action == 'help':
    argv0 = path.basename(argv[0])
    print(f'{argv0} [action] [...] [-bclmp]')
    print()
    print(f'{argv0} add [name]')
    print(f'{argv0} alias [name]=[target] ...')
    print(f'{argv0} fromman [name]=[path]')
    print(f'{argv0} edit [name]')
    print(f'{argv0} missing')
    print(f'{argv0} rawedit [branch]')
    print(f'{argv0} request [name] ...')
    print(f'{argv0} fd [regex]')
    print(f'{argv0} view [name]')
    print(f'{argv0} cat [name]')
    print(f'{argv0} rm [branch]')
    print(f'{argv0} grep [regex]')
    print(f'{argv0} checkout [branch]')
    print(f'{argv0} update')
    print()
    print('help, --help, -h, -H          Display this help')
    print('version, --version, -v, -V    Display information about this program')
    print()
    # TODO: HELP
elif action == 'missing':
    l = list(get_all_installed_programs() - get_all_tldr_pages('pages'))
    l.sort()
    for p in l:
        if not '.' in p:
            print(p)
elif action == 'add':
    # TODO: translated templates
    checkout(args.branch)
    for name in name:
        with open(page_path(name), 'w') as f:
            f.write(f'# {name}\n\n'
                    '> DESC\n'
                    '> More information: <insert>.\n\n'
                    '- Example1:\n\n'
                    '`' + name + ' {{arg1}} {{arg2}}`\n')
        sh(f'{editor} {page_path(name)}')
        sh(f'tldrl -v {page_path(name)}')
        sh(f'git add {page_path(name)}')
        sh(f'git commit -m \'{name}: {args.commit_message}\'')
    sh(f'git push -u origin {args.branch}')
    checkout('main')
elif action == 'alias':
    # TODO: translations with automatic check for which pages of the target exist
    #       (that needs a markdown parser, which is an...interesting problem)
    # TODO: fix these damn names (i mean we have 3 vars that are called `name` here)
    # TODO: support `-m` somehow
    checkout(args.branch)
    if len(name) % 2 == 0 and True not in ['=' in n for n in name]:
        n = []
        for i in range(0, len(name) / 2):
            n.append(f'{name[i*2]}={name[i*2+1]}')
        name = n
    for name in name:
        [name, target] = name.split('=')
        with open(page_path(name), 'w') as f:
            f.write(f'# {name}\n\n'
                    f'> This command is an alias of `{target}`.\n\n'
                    '- View documentation for the original command:\n\n'
                    f'`tldr {target}`\n')
        sh(f'git add {page_path(name)}')
        sh(f'git commit -m \'{name}: add page\'')
    sh(f'git push -u origin {args.branch}')
    params = urlencode({'labels': 'new command', 'body': f'alias of `{target}`', 'expand': 1})
    run_open(f'https://github.com/tldr-pages/tldr/compare/main...{username}:{args.branch}?' + params)
    checkout('main')
elif action == 'fromman':
    # TODO:
    n = name.split('=')[0]
    f = name.split('=')[1]
    man = sh('awk \'/\\.[sS][hH].*EXAMPLES.*/{b=1;next}/\\.[sS][hH]/{b=0}b\' ' + f +
             ' | pandoc -f man - -o - -t markdown', quiet=True, stdout=PIPE).stdout.decode('utf-8')
    checkout(args.branch)
    with open(page_path(n), 'w') as f:
        f.write(f'# {n}\n\n'
                '> DESC\n'
                '> More information: <insert>.\n\n'
                f'{man}\n')
    sh(f'{editor} {page_path(n)}')
    sh(f'tldrl -v {page_path(n)}')
    sh(f'git add {page_path(n)}')
    sh(f'git commit -m \'{n}: {args.commit_message}\'')
    sh(f'git push -u origin {args.branch}')
    checkout('main')
elif action == 'edit':
    checkout(args.branch)
    sh(f'{editor} {page_path()}')
    sh(f'tldrl -v {page_path()}')
    sh(f'git add {page_path()}')
    sh(f'GIT_EDITOR={editor} git commit -e -m "{args.commit_message}"')
    sh(f'git push -u origin {args.branch}')
    checkout('main')
    # TODO: open PR page
    # TODO: `quickedit` for editing existing PRs
elif action == 'rawedit':
    checkout(args.branch)
    sh(args.command)
    sh('git add -A')
    sh(f'GIT_EDITOR={editor} git commit -e -m "{args.commit_message}"')
    sh(f'git push -u origin {args.branch}')
    checkout('main')
    # TODO: open PR page
elif action == 'request':
    if len(name) == 1:
        new_issue({'title': f'page request: {name[0]}'})
    else:
        title = 'page request: ' + reduce(lambda x, y: x + ', ' + y, name)
        body = reduce(lambda x, y: x + '\n' + y, map(lambda p: f'- [ ] [{p}]()', name))
        new_issue({'title': title, 'body': body})
elif action == 'fd':
    sh(f'fd \'{name}\'')
elif action == 'view':
    sh(f'tldr {name}')
elif action == 'cat':
    # TODO: rethink this to maybe support $PAGER or something
    sh(f'cat {page_path()}')
elif action == 'rm':
    for name in name:
        sh(f'git branch -D {name}')
        sh(f'git push -d origin {name}')
elif action == 'update':
    sh('git fetch upstream')
    sh('git merge upstream/main')
    sh('git push')
elif action == 'grep':
    # TODO: support a custom dir
    sh(f'grep --color=always --exclude-dir=.git -R -- \'{name}\' .')
elif action == 'checkout':
    checkout(name)
else:
    print('Unknown action.')
    exit(1)
